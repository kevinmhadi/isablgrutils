#' @name kpdf
#' @title open pdf device with ppdf defaults without closing
#'
#' @description
#'
#' @export
kpdf = function(filename = "plot.pdf", height = 10, width = 10, 
    h = height, w = width, cex = 1, title = NULL, byrow = TRUE, 
    dim = NULL, cex.title = 1, oma.scale = 0, oma.val = c(1, 1, 1, 1), useDingbats = FALSE, res = 0, pars = list(), 
    ...) {
    this.env = environment()
    if (length(cex) == 1) 
        cex = rep(cex, 2)
    height = h
    width = w
    height = cex[1] * height
    width = cex[2] * width
    DEFAULT.OUTDIR = Sys.getenv("PPDF.DIR")
    if (nchar(DEFAULT.OUTDIR) == 0) 
        DEFAULT.OUTDIR = normalizePath("~/public_html/")
    if (!grepl("^[~/]", filename)) 
        filename = paste(DEFAULT.OUTDIR, filename, sep = "/")
    if (!file.exists(file.dir(filename))) 
        system(paste("mkdir -p", file.dir(filename)))
    cat("rendering to", filename, "\n")
    pdf(file = filename, height = height, width = width, useDingbats = useDingbats, ...)
    if (!is.null(dim)) {
            if (length(dim) == 1) 
                dim = rep(dim, 2)
            dim = dim[1:2]
            graphics::layout(matrix(1:prod(dim), nrow = dim[1], 
                ncol = dim[2], byrow = byrow))
    }
    if (!is.null(title)) 
        title(title, cex.main = cex.title * max(cex))
}

#' @name ksvg
#' @title open svg device with ppdf defaults without closing
#'
#' @description
#'
#' @export
ksvg = function(filename = "plot.svg", height = 10, width = 10,
                h = height, w = width, cex = 1, title = NULL, byrow = TRUE, 
                dim = NULL, cex.title = 1, oma.scale = 0, units = 'in', oma.val = c(1, 1, 1, 1),
                useDingbats = FALSE, res = 300, pars = list(),
                ...) {
    this.env = environment()
    if (length(cex) == 1) 
        cex = rep(cex, 2)
    height = h
    width = w
    height = cex[1] * height
    width = cex[2] * width
    DEFAULT.OUTDIR = Sys.getenv("PPDF.DIR")
    if (nchar(DEFAULT.OUTDIR) == 0) 
        DEFAULT.OUTDIR = normalizePath("~/public_html/")
    if (!grepl("^[~/]", filename)) 
        filename = paste(DEFAULT.OUTDIR, filename, sep = "/")
    if (!file.exists(file.dir(filename))) 
        system(paste("mkdir -p", file.dir(filename)))
    cat("rendering to", filename, "\n")
    svg(file = filename, height = height, width = width, ...)
    if (!is.null(dim)) {
        if (length(dim) == 1) 
            dim = rep(dim, 2)
        dim = dim[1:2]
        graphics::layout(matrix(1:prod(dim), nrow = dim[1], 
                                ncol = dim[2], byrow = byrow))
    }
    if (!is.null(title)) 
        title(title, cex.main = cex.title * max(cex))
}
    
    


#' @name kpng
#' @title open png device with ppng defaults without closing
#'
#' @description
#'
#' @export
kpng = function(filename = "plot.png", height = 10, width = 10,
                h = height, w = width, cex = 1, title = NULL, byrow = TRUE, 
                dim = NULL, cex.title = 1, oma.scale = 0, units = 'in', oma.val = c(1, 1, 1, 1),
                useDingbats = FALSE, res = 300, pars = list(),
                ...) {
    this.env = environment()
    if (length(cex) == 1) 
        cex = rep(cex, 2)
    height = h
    width = w
    height = cex[1] * height
    width = cex[2] * width
    DEFAULT.OUTDIR = Sys.getenv("PPDF.DIR")
    if (nchar(DEFAULT.OUTDIR) == 0) 
        DEFAULT.OUTDIR = normalizePath("~/public_html/")
    if (!grepl("^[~/]", filename)) 
        filename = paste(DEFAULT.OUTDIR, filename, sep = "/")
    if (!file.exists(file.dir(filename))) 
        system(paste("mkdir -p", file.dir(filename)))
    cat("rendering to", filename, "\n")
    png(file = filename, height = height, width = width, units = units, res = res, ...)
    if (!is.null(dim)) {
        if (length(dim) == 1) 
            dim = rep(dim, 2)
        dim = dim[1:2]
        graphics::layout(matrix(1:prod(dim), nrow = dim[1], 
                                ncol = dim[2], byrow = byrow))
    }
    if (!is.null(title)) 
        title(title, cex.main = cex.title * max(cex))
}

#' @name kpng
#' @title open png device with ppng defaults without closing
#'
#' @description
#'
#' @export
kjpeg = function(filename = "plot.jpeg", height = 10, width = 10,
                h = height, w = width, cex = 1, title = NULL, byrow = TRUE, 
                dim = NULL, cex.title = 1, oma.scale = 0, units = 'in', oma.val = c(1, 1, 1, 1),
                useDingbats = FALSE, res = 300, quality = 75, pars = list(),
                ...) {
    this.env = environment()
    if (length(cex) == 1) 
        cex = rep(cex, 2)
    height = h
    width = w
    height = cex[1] * height
    width = cex[2] * width
    DEFAULT.OUTDIR = Sys.getenv("PPDF.DIR")
    if (nchar(DEFAULT.OUTDIR) == 0) 
        DEFAULT.OUTDIR = normalizePath("~/public_html/")
    if (!grepl("^[~/]", filename)) 
        filename = paste(DEFAULT.OUTDIR, filename, sep = "/")
    if (!file.exists(file.dir(filename))) 
        system(paste("mkdir -p", file.dir(filename)))
    cat("rendering to", filename, "\n")
    jpeg(file = filename, height = height, width = width, units = units, res = res, quality = quality, ...)
    if (!is.null(dim)) {
        if (length(dim) == 1) 
            dim = rep(dim, 2)
        dim = dim[1:2]
        graphics::layout(matrix(1:prod(dim), nrow = dim[1], 
                                ncol = dim[2], byrow = byrow))
    }
    if (!is.null(title)) 
        title(title, cex.main = cex.title * max(cex))
}



#' @name reset.dev
#' @title reset.dev
#'
#' @description
#' dealing with annoying plot resets
#'
#' @export reset.dev
reset.dev = function(x) {
  err = NULL
  while (is.null(err)) {
    err = tryCatch({eval(quote(dev.off()), globalenv()); NULL}, error = function(e) structure("", class = "err"))
    ## err = tryCatch({evalq(dev.off(), globalenv()); NULL}, error = function(e) structure("", class = "err"))
  }
}

#' @name no.dev
#' @title no.dev
#'
#' @description
#' turn off all graphic devices
#'
#' @export no.dev
no.dev <- function(...) {
    evalq({
        for (d in dev.list()) dev.off(d)
    }, envir = .GlobalEnv)
}
